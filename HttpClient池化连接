环境:spring-boot-2.2.6.RELEASE + httpclient4.5.12
配置类:
import org.apache.http.client.HttpClient;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.conn.HttpClientConnectionManager;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.client.ClientHttpRequestFactory;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.web.client.RestTemplate;

import java.nio.charset.Charset;
import java.util.List;

/**
 * HttpClient的配置类
 */
@Configuration
@ConfigurationProperties(prefix = "http")
public class HttpClientConfig {

    private Integer maxTotal;// 最大连接数

    private Integer defaultMaxPerRoute;// 每个host的可发起的最大连接数

    private Integer connectTimeout;// http client端与server端建立连接超时时间

    private Integer connectionRequestTimeout;// 从连接池中获取到连接的最长时间

    private Integer socketTimeout;// http server端响应超时时间

    /**
     * HttpClient连接池
     * @return
     */
    @Bean
    public HttpClientConnectionManager httpClientConnectionManager() {
        PoolingHttpClientConnectionManager connectionManager = new PoolingHttpClientConnectionManager();
        connectionManager.setMaxTotal(maxTotal);
        connectionManager.setDefaultMaxPerRoute(defaultMaxPerRoute);
        connectionManager.setValidateAfterInactivity(socketTimeout);
        connectionManager.closeIdleConnections(500, TimeUnit.MILLISECONDS);
        return connectionManager;
    }

    /**
     * 注册RequestConfig
     * @return
     */
    @Bean
    public RequestConfig requestConfig() {
        return RequestConfig.custom().setConnectTimeout(connectTimeout)
                .setConnectionRequestTimeout(connectionRequestTimeout)
                .setSocketTimeout(socketTimeout)
                .build();
    }

    /**
     * 注册HttpClient
     * @param manager
     * @param config
     * @return
     */
    @Bean
    public CloseableHttpClient httpClient(HttpClientConnectionManager manager, RequestConfig config) {
        return HttpClientBuilder.create()
                .setConnectionManager(manager)
                .setDefaultRequestConfig(config)
                .build();
    }

    @Bean
    public ClientHttpRequestFactory requestFactory(CloseableHttpClient httpClient) {
        return new HttpComponentsClientHttpRequestFactory(httpClient);
    }
    /**
     * 使用HttpClient来初始化一个RestTemplate
     */
    @Bean
    public RestTemplate restTemplate(ClientHttpRequestFactory requestFactory) {
        RestTemplate template = new RestTemplate(requestFactory);

        List<HttpMessageConverter<?>> list = template.getMessageConverters();
        for (HttpMessageConverter<?> mc : list) {
            if (mc instanceof StringHttpMessageConverter) {
                ((StringHttpMessageConverter) mc).setDefaultCharset(Charset.forName("UTF-8"));
            }
        }
        return template;
    }
    
    // getter和setter方法
    }
    
    对应的application.properties配置
#The config for HttpClient
http.maxTotal=15
http.defaultMaxPerRoute=5
http.connectTimeout=1000
http.connectionRequestTimeout=3000
http.socketTimeout=10000


服务类:

/**
 * ESTABLISHED 表示正在进行网络连接的数量
 * TIME_WAIT 表示表示等待系统主动关闭网络连接的数量
 * CLOSE_WAIT 表示被动等待程序关闭的网络连接数量
 *
 * 比如服务器A去请求服务器B上面的a.txt文件资源，
 * 正常情况下，如果请求成功，那么在抓取完资源后服务器A会主动发出关闭连接的请求，
 * 这个时候就是主动关闭连接，连接状态我们可以看到是TIME_WAIT。
 * 一旦发生异常呢？
 * 假设请求的a.txt在服务器B上并不存在，那么这个时候就会由服务器B发出关闭连接的请求，
 * 服务器A就是被动的关闭了连接，如果服务器A被动关闭连接之后自己并没有释放连接，
 * 那就会造成CLOSE_WAIT的状态了。
 *
 */
@Component
public final class HttpUtils {

    @Autowired
    private CloseableHttpClient client;

    public String post(String url, Map<String,String> paraMap, String encoding) throws IOException {

        if(null==encoding){
            encoding="utf-8";
        }

        //创建post方式请求对象
        HttpPost httpPost = new HttpPost(url);

        setParams(httpPost,paraMap,encoding);

        return doSend(client,httpPost,encoding);

    }

    private static String doSend(CloseableHttpClient client, HttpRequestBase request, String encoding) {
        String result = null;
        CloseableHttpResponse response = null;
        try{

//   使用response.close();结果就是连接会被关闭，并且不能被复用，这样就失去了采用连接池的意义。
            response = client.execute(request);
            if(response.getStatusLine().getStatusCode()== HttpStatus.SC_OK){
                //获取结果实体
                HttpEntity entity = response.getEntity();
                if (entity != null) {
                    //按指定编码转换结果实体为String类型
                    result = EntityUtils.toString(entity, encoding);
                    EntityUtils.consume(entity);
                }
            }else{
                request.abort();
            }

        }catch (Exception e){
            request.abort();
            HttpClientUtils.closeQuietly(response);
        }finally {
            if(request != null){
                request.releaseConnection();
            }

        }

        return result;
    }

    private static void setParams(HttpPost httpPost, Map<String, String> paraMap,String encoding) throws UnsupportedEncodingException {
        if(!ObjectUtils.isEmpty(paraMap)){
            //装填参数
            List<NameValuePair> params = new ArrayList<>();
            for (Map.Entry<String, String> entry : paraMap.entrySet()) {
                if(!StringUtils.isBlank(entry.getValue())){
                    params.add(new BasicNameValuePair(entry.getKey(), entry.getValue()));
                }
            }
            //设置参数到请求对象中
            if(!ObjectUtils.isEmpty(params)) {
                httpPost.setEntity(new UrlEncodedFormEntity(params, encoding));
            }
        }

        //设置header信息
        //指定报文头【Content-type】、【User-Agent】
        httpPost.setHeader("Content-Type", "application/x-www-form-urlencoded");
//        httpPost.setHeader("User-Agent", "Mozilla/5.0 (compatible; MSIE 5.0; Windows NT; DigExt)");
        httpPost.setHeader("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36");

    }


    public String post(String url, String json, String encoding)  {
   //        checkJson(json);
        if(null==encoding){
            encoding="utf-8";
        }

        // 创建post方式请求对象
        HttpPost httpPost = new HttpPost(url);

//        httpPost.addHeader("Cookie", cookieStore.toString());
        if(!StringUtils.isBlank(json)){
            // 设置参数到请求对象中
            StringEntity stringEntity = new StringEntity(json, ContentType.APPLICATION_JSON);
            stringEntity.setContentEncoding(encoding);
            httpPost.setEntity(stringEntity);
        }

        httpPost.setHeader("Content-Type", "application/x-www-form-urlencoded");
//        httpPost.setHeader("User-Agent", "Mozilla/5.0 (compatible; MSIE 5.0; Windows NT; DigExt)");
        httpPost.setHeader("User-Agent","Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.113 Safari/537.36");

        return doSend(client,httpPost,encoding);
    }

//    private static boolean checkJson(String json) {
//        return true;
//    }


    public String get(String url, String encoding) throws IOException {

        if(null==encoding){
            encoding="utf-8";
        }

        // 创建get方式请求对象
        HttpGet httpGet = new HttpGet(url);
        httpGet.addHeader("Content-type", "application/json");

        return doSend(client,httpGet,encoding);

    }

}


测试类:


@SpringBootTest
class StudySpringApplicationTests {

    @Test
    void contextLoads() {
    }

    @Autowired
    private HttpUtils httpUtils;

    HttpRequestUtils httpClientUtils;

//    private final static Executor executor = Executors.newFixedThreadPool(10);//启用多线程

    @Test
    public void httpConnect() throws IOException,InterruptedException {
        int count = 1000;
        ExecutorService executors = Executors.newFixedThreadPool(count,
                new ThreadFactory() {
                    AtomicInteger atomic = new AtomicInteger();
                    public Thread newThread(Runnable r) {
                        return new Thread(r, "Thread" + this.atomic.getAndIncrement());
                    }
                });


        CountDownLatch countDownLatch = new CountDownLatch(count);
        for (int i = 0; i < count; i++) {
            executors.execute(new Runnable() {
                @Override
                public void run() {
                    try{
                        String res = httpUtils.get("https://blog.csdn.net/ycb1689/article/details/80521650","utf-8");
//                        System.out.println(res);

                        countDownLatch.countDown();
                    }catch(Exception e){

                        System.out.println("errMsg:"+e.getLocalizedMessage());
                    }
                }
            });

        }

        countDownLatch.await();
        executors.shutdown();
    }
}

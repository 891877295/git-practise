import java.io.*;
import java.nio.MappedByteBuffer;
import java.nio.channels.*;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

public class ZipUtils {
    private final static Integer TEMP_SIZE = 2048;

    public static void zipFilePip(String zipFileName,String directory){
        File dFile = new File(directory);
        if (dFile.isDirectory()) {
            File[] files = dFile.listFiles();
            List<File> listFiles = new ArrayList<>();
            for (File file : files) {
               if(!file.isDirectory()){
                   listFiles.add(file);
               }
            }

            zipFilePip(zipFileName,listFiles);
        }else{
            System.err.println(directory+"不是文件夹!");
        }

    }

    public static void zipFilePip(String zipFileName, List<File> listFiles) {
        File zipFile = new File(zipFileName);
        try (ZipOutputStream zipOut = new ZipOutputStream(new FileOutputStream(zipFile));
             WritableByteChannel writableByteChannel = Channels.newChannel(zipOut)) {

            for (int i = 0,size=listFiles.size(); i < size; i++) {

                //内存中的映射文件
                File file = listFiles.get(i);
                zipOut.putNextEntry(new ZipEntry(file.getName()));

                long fileSize = file.length();

                MappedByteBuffer mappedByteBuffer =
                        new RandomAccessFile(file, "r").getChannel()
                                .map(FileChannel.MapMode.READ_ONLY, 0, fileSize);

                writableByteChannel.write(mappedByteBuffer);
            }

        } catch (Exception e) {
            System.err.println("文件压缩出错!");
        }

    }


    public static void main(String[] args) {
        zipFilePip("d:/ZipUtils.zip","d:/jpg");
    }
}
